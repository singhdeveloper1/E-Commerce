openapi: 3.0.0
info:
  title: E-commerce API
  version: 1.0.0
  description: API for user registration, login, and other functionalities.
servers:
  - url: http://localhost:1200
    description: Local server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /api/user/register:
    post:
      summary: Register a new user
      description: Registers a new user by providing the user's name, email, phone, and password.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required:
                    - name
                    - email
                    - password
                  properties:
                    name:
                      type: string
                      description: Full name of the user
                    email:
                      type: string
                      format: email
                      description: Email address of the user
                      example: "john.doe@example.com"
                    phone:
                      type: number
                      description: Phone number of the user (optional if email is provided)
                      example: 9876543210
                    password:
                      type: string
                      description: Password for the new user
                      example: "strongPassword123"
                - type: object
                  required:
                    - name
                    - phone
                    - password
                  properties:
                    name:
                      type: string
                      description: Full name of the user
                    email:
                      type: string
                      format: email
                      description: Email address of the user (optional if phone is provided)
                      example: "john.doe@example.com"
                    phone:
                      type: number
                      description: Phone number of the user
                      example: 9876543210
                    password:
                      type: string
                      description: Password for the new user
                      example: "strongPassword123"
              description: |
                Either `email` or `phone` must be provided for the user registration.
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      phone:
                        type: number
                        example: 9876543210
        '400':
          description: Invalid input or user already exists
        '401':
          description: Verification required (email/phone not verified)

  /api/user/login:
    post:
      summary: Login an existing user
      description: Logs in an existing user by providing either the user's email or phone along with the password.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required:
                    - email
                    - password
                  properties:
                    email:
                      type: string
                      format: email
                      description: Email address of the user
                      example: "john.doe@example.com"
                    phone:
                      type: number
                      description: Phone number of the user (optional if email is provided)
                      example: 9876543210
                    password:
                      type: string
                      description: Password for the user
                      example: "strongPassword123"
                - type: object
                  required:
                    - phone
                    - password
                  properties:
                    email:
                      type: string
                      format: email
                      description: Email address of the user (optional if phone is provided)
                      example: "john.doe@example.com"
                    phone:
                      type: number
                      description: Phone number of the user
                      example: 9876543210
                    password:
                      type: string
                      description: Password for the user
                      example: "strongPassword123"
              description: |
                Either `email` or `phone` must be provided for the user to log in.
      responses:
        '200':
          description: User successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  existingUser:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      phone:
                        type: number
                  token:
                    type: string
                    description: The token generated for the logged-in user
                    example: "your-jwt-token"
        '400':
          description: Bad request due to missing or invalid fields
        '401':
          description: Invalid credentials or user does not exist

  /api/user/google:
    post:
      summary: Google login/signup
      description: Login or register a user via Google.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
              properties:
                name:
                  type: string
                  description: Name of the user
                email:
                  type: string
                  format: email
                  description: Email address of the user
      responses:
        '200':
          description: Successfully logged in or registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  existingUser:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                  token:
                    type: string
                    description: The token generated for the logged-in user
                    example: "your-jwt-token"
        '400':
          description: Bad request (incorrect parameters)

  /api/user/forgotPassword:
    patch:
      summary: Forgot password
      description: Sends an OTP to the user's email to reset the password.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: Email address of the user
                  example: "john.doe@example.com"
      responses:
        '200':
          description: OTP sent successfully to the user's email
        '400':
          description: Missing email or incorrect email format

  /api/user/getUserData:
    get:
      summary: Retrieve user data
      description: Retrieves the user information of the authenticated user.
      tags:
        - User
      security:
        - bearerAuth: []  # JWT authentication required
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")        
      responses:
        '200':
          description: Successfully retrieved user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  email:
                    type: string
                  phone:
                    type: Number
                  firstName:
                    type: string
                  lastname:
                    type: string
                  address:
                    type: string      
        '401':
          description: Unauthorized access (invalid token)

  /api/user/updateUserData:
    patch:
      summary: Update user data
      description: Updates the user's information (name, email, phone).
      tags:
        - User
      security:
        - bearerAuth: []  # JWT authentication required
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")        
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: Number
                firstName:
                  type: string
                lastName:
                  type: string
                address: 
                  type: string      
      responses:
        '200':
          description: User data updated successfully
        '400':
          description: Invalid data provided
        '401':
          description: Unauthorized access (invalid token)

  /api/user/updateUserPassword:
    patch:
      summary: Update user password
      description: Updates the user's password after verifying the old password.
      tags:
        - User
      security:
        - bearerAuth: []  # JWT authentication required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password updated successfully
        '400':
          description: Invalid data provided
        '401':
          description: Unauthorized access (invalid token)

  /api/user/addUserAddress:
    post:
      summary: Add user address
      description: Adds a new address for the authenticated user.
      tags:
        - User
      security:
        - bearerAuth: []  # JWT authentication required
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")        
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - street
                - state
                - city
                - pinCode
                - phone
                - country
                - firstName
                - email
              properties:
                street:
                  type: string
                state:
                  type: string
                city:
                  type: string
                pinCode:
                  type: string
                phone:
                  type: number
                country:
                  type: string 
                firstName:
                  type: string
                lastName:
                  type: string
                company:
                  type: string
                apartment:
                  type: string
                email:
                  type: string           
      responses:
        '200':
          description: Address added successfully
        '400':
          description: Invalid input
        '401':
          description: Unauthorized access (invalid token)

  /api/user/getUserAddress:
    get:
      summary: Get user address
      description: Retrieves all the addresses of the authenticated user.
      tags:
        - User
      security:
        - bearerAuth: []  # JWT authentication required
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")        
      responses:
        '200':
          description: Successfully retrieved user address data
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    state:
                      type: string
                    city:
                      type: string
                    pincode:
                      type: string
                    phone:
                      type: number
        '401':
          description: Unauthorized access (invalid token)

  /api/user/getSpecificAddress/{id}:
    get:
      tags:
        - User
      summary: Get a specific address by ID for the authenticated user
      description: Retrieves a specific address from the user's address book by its ID.
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")      
        - name: id
          in: path
          required: true
          description: The ID of the address to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the address
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  userId:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  company:
                    type: string
                  apartment:
                    type: string        
                  street:
                    type: string
                  city:
                    type: string
                  state:
                    type: string
                  pinCode:
                    type: string
                  country:
                    type: string
                  phone: 
                    type: number
                  email:
                    type: string    
        '401':
          description: Unauthorized - Authentication failed
        '404':
          description: Address not found
        '500':
          description: Internal server error
      security:
        - bearerAuth: []          

  /api/user/updateUserAddress/{id}:
    patch:
      summary: Update user address
      description: Update the address of the user based on the provided address ID.
      tags:
        - User
      security:
        - bearerAuth: []  # JWT authentication required
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}") 
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the address to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - street
                - state
                - city
                - pinCode
                - phone
                - country
                - firstName
                - email
              properties:
                street:
                  type: string
                state:
                  type: string
                city:
                  type: string
                pinCode:
                  type: string
                phone:
                  type: number
                country:
                  type: string 
                firstName:
                  type: string
                lastName:
                  type: string
                company:
                  type: string
                apartment:
                  type: string
                email:
                  type: string  
      responses:
        '200':
          description: Address updated successfully
        '400':
          description: Invalid input
        '401':
          description: Unauthorized access (invalid token)

  /api/user/deleteUserAddress/{id}:
    delete:
      summary: Delete a user address
      description: Deletes the address of the authenticated user by the provided address ID.
      tags:
        - User
      security:
        - bearerAuth: []  # JWT authentication required
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")
        - in: path
          name: id
          required: true
          description: The ID of the address to be deleted
          schema:
            type: string
      responses:
        '200':
          description: Address successfully deleted
        '401':
          description: Unauthorized access (invalid token)
        '404':
          description: Address not found

  /api/user/logout:
    get:
      summary: User logout
      description: |
        Logs out the user by blacklisting the JWT token and clearing the cookie.
        Requires valid JWT token in Authorization header.
      tags:
        - User
      security:
        - bearerAuth: []  # JWT authentication required
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")
      responses:
        '200':
          description: Successfully logged out and token invalidated
        '401':
          description: Unauthorized access (invalid or missing token)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized: Invalid token"
        '500':
          description: Internal server error

  /api/user/switchToSeller:
    patch:
      summary: Switch user to seller role
      description: Updates the authenticated user's role to a seller (sets `isSeller` to `true`).
      tags:
        - User
      security:
        - bearerAuth: []  # Requires JWT authentication
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")        
      responses:
        '200':
          description: Successfully switched to seller role
          content:
            application/json:
              schema:
                type: string
                example: "switched to seller successfully"
        '401':
          description: Unauthorized (invalid or missing token)
        '500':
          description: Internal server error

  /api/otp/getOTP:
    post:
      summary: Generate and send OTP
      description: Sends an OTP to the provided email or phone (at least one required).
      tags:
        - OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Email to receive OTP (required if phone not provided)
                  example: "user@example.com"
                phone:
                  type: number
                  description: Phone to receive OTP (required if email not provided)
                  example: 9876543210
              anyOf:
                - required: [email]
                - required: [phone]
      responses:
        '200':
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: string
                example: "OTP send Successfullyy!!!"
        '400':
          description: "email or phone is required to send otp"
        '500':
          description: Internal server error
  
  /api/otp/verifyOTP:
    post:
      summary: Verify OTP
      description: Verifies the OTP sent to email or phone and marks it as verified if correct.
      tags:
        - OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Email used for OTP (required if phone not provided)
                  example: "user@example.com"
                phone:
                  type: number
                  description: Phone used for OTP (required if email not provided)
                  example: 9876543210
                otp:
                  type: number
                  description: OTP to verify
                  example: 1234
              anyOf:
                - required: [email, otp]
                - required: [phone, otp]
      responses:
        '200':
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: string
                example: "verifieddd !!!"
        '401':
          description: "invalid otp"
        '404':
          description: "otp is not present"
        '500':
          description: Internal server error          
  
  /api/seller/switchToUser:
    patch:
      summary: Switch seller back to user role
      description: Updates the authenticated user's role from seller back to regular user (sets `isSeller` to `false`).
      tags:
        - Seller
      security:
        - bearerAuth: []  # Requires JWT authentication
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")        
      responses:
        '200':
          description: Successfully switched to user role
          content:
            application/json:
              schema:
                type: string
                example: "switched to user successfully!!!"
        '401':
          description: Unauthorized (invalid or missing token)
        '500':
          description: Internal server error          
  
  /api/seller/addproduct:
    post:
      summary: Add a new product
      description: |
        Seller-only endpoint to add new products with optional image upload.
        Requires seller authentication.
      tags:
        - Seller
      security:
        - bearerAuth: []  # JWT authentication required
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")        
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - productName
                - productPrice
                - productDescription
              properties:
                productName:
                  type: string
                  description: Name of the product
                  example: "Premium Smartphone"
                productPrice:
                  type: number
                  description: Price of the product
                  example: 599.99
                discountPercentage:
                  type: number
                  description: Optional discount percentage (0-100)
                  example: 15
                productDescription:
                  type: string
                  maxLength: 200
                  description: Product description
                  example: "High-quality smartphone with advanced features"
                productSize:
                  type: string
                  enum: ["XS", "S", "M", "L", "XL"]
                  description: Size of the product
                  example: "M"
                productColor:
                  type: string
                  enum: ["Red", "Blue", "Green", "Yellow", "Orange", "Purple", "Pink", "Black", "White", "Gray", "Brown", "Gold", "Silver"]
                  description: Color of the product
                  example: "Black"
                image:
                  type: string
                  format: binary
                  description: Product image file
                category:
                  type: string
                  enum : ["Woman's_Fashion", "Men's_Fashiom", "Electronics", "Home_and_LifeStyle", "Medicine", "Sports_&_Outdoor", "Baby's_&_Toys", "Groceries_&_Pets", "Health_&_Beauty" ]
                  description: category of the product
                  example: Electronics
                subCategory:
                  type: String
                  enum : ["T-Shirts", "Jeans", "Shoes", "Jacket", "Phones", "Computers", "SmartWatch", "Camera", "HeadPhone","Furniture", "Decor", "Cleaner","capsule", "syrup", "fitness", "Kit", "Skates", "Kites","Dairy", "Bread", "Meat","Makeup", "SkinCare" ]
                  description: subCategory of the Product
                  example: Camera  
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    description: Product ID
                    example: "507f1f77bcf86cd799439011"
                  productName:
                    type: string
                  productImage:
                    type: string
                    default: "https://odoo-community.org/web/image/product.template/1844/image_1024?unique=1e911c3"
                  productPrice:
                    type: number
                  discountPercentage:
                    type: number
                    nullable: true
                  productDescription:
                    type: string
                  productSize:
                    type: string
                  productColor:
                    type: string
                  category:
                    type: string
                  subCategory:
                    type: string    
                  seller:
                    type: string
                    description: Seller's user ID
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        '401':
          description: Unauthorized - User is not a seller
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "you are not a seller!!!"
        '500':
          description: Internal server error  
  
  /api/seller/getProduct:
    get:
      summary: Get all products by seller
      description: Retrieves all products uploaded by the authenticated seller.
      tags:
        - Seller
      security:
        - bearerAuth: []  # JWT authentication required
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")        
      responses:
        '200':
          description: Successfully retrieved all products
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    productName:
                      type: string
                    productImage:
                      type: string
                    productPrice:
                      type: number
                    discountPercentage:
                      type: number
                    seller:
                      type: string
        '401':
          description: Unauthorized access (user is not a seller or invalid token)
        '500':
          description: Internal server error
  
  /api/seller/updateProduct/{id}:
    patch:
      summary: Update a product
      description: |
        Seller-only endpoint to update product details.
        Supports optional image update via file upload.
      tags:
        - Seller
      security:
        - bearerAuth: []  # Requires JWT authentication
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}") 
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to update
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                productName:
                  type: string
                  description: Updated product name
                  example: "Premium Smartphone Pro"
                productPrice:
                  type: number
                  description: Updated product price
                  example: 699.99
                discountPercentage:
                  type: number
                  nullable: true
                  description: Updated discount percentage (0-100)
                  example: 20
                productDescription:
                  type: string
                  description: update product description
                  example : xyz
                productColor:
                  type: string
                  description: update product color
                  example: Red
                productSize:
                  type: string
                  description: update product size
                  example: XL
                category:
                  type: string
                  description: update product category
                  example: Electronics
                subCategory:
                  type: string
                  description: update product subcategory
                  example: Skates          
                image:
                  type: string
                  format: binary
                  description: New product image (optional)
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: string
                example: "product updated successfully!!!"
        '401':
          description: Unauthorized - User is not a seller
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "you are not a seller"
        '500':
          description: Internal server error  
  
  /api/seller/deleteProduct/{id}:
    delete:
      summary: Delete a product
      description: Seller-only endpoint to delete a product by ID
      tags:
        - Seller
      security:
        - bearerAuth: []  # Requires JWT authentication
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")  
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to delete
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "product successfully deleted!!!"
        '401':
          description: Unauthorized - User is not a seller
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "you are not a seller"
        '500':
          description: Internal server error                            
  
  /api/seller/deleteAllProduct:
    delete:
      summary: Delete all seller's products
      description: Seller-only endpoint to delete all products belonging to the authenticated seller
      tags:
        - Seller
      security:
        - bearerAuth: []  # Requires JWT authentication
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")        
      responses:
        '200':
          description: All products deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "successfully deleted all products!!"
        '401':
          description: Unauthorized - User is not a seller
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "you are not a seller"
        '500':
          description: Internal server error   

  /api/seller/addForSale/{productId}:
    patch:
      summary: Add product to sale
      description: |
        Marks a product as being on sale (seller-only).
        Requires an active sale period.
        Sets discount percentage for the product.
      tags:
        - Seller
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: ID of the product to mark for sale
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - discountPercentage
              properties:
                discountPercentage:
                  type: number
                  description: Discount percentage to apply (0-100)
      responses:
        '200':
          description: Product successfully added to sale
          content:
            application/json:
              schema:
                type: string
                example: "product added for sale"
        '401':
          description: Unauthorized - User is not a seller
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "you are not a seller!!!"
        '404':
          description: No active sale found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "sale is no longer exist!!!"
        '500':
          description: Internal server error          

  /api/review/writeReview/{productId}:
    post:
      summary: Write or update a product review
      description: Submit or update a review for a specific product
      tags:
        - Review
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")  
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: ID of the product to review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - rating
              properties:
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                  example: 5
                comment:
                  type: string
                  maxLength: 200
                  example: "Great product!"
      responses:
        '200':
          description: Review submitted successfully
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      msg:
                        type: string
                        example: "review updated successfully!!"
                      review:
                        type: object
                        properties:
                          _id:
                            type: string
                          userId:
                            type: string
                          productId:
                            type: string
                          rating:
                            type: number
                          comment:
                            type: string
                          createdAt:
                            type: string
                            format: date-time
                          updatedAt:
                            type: string
                            format: date-time
                  - type: object
                    properties:
                      msg:
                        type: string
                        example: "review added successfully"
                      newReview:
                        type: object
                        properties:
                          _id:
                            type: string
                          userId:
                            type: string
                          productId:
                            type: string
                          rating:
                            type: number
                          comment:
                            type: string
                          createdAt:
                            type: string
                            format: date-time
                          updatedAt:
                            type: string
                            format: date-time
        '400':
          description: Rating is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "please rate between 1 to 5"
        '401':
          description: Unauthorized
        '500':
          description: Internal server error  
          
  /api/review/mySeperateReview/{productId}:
    get:
      summary: Get user's specific review for a product
      description: Retrieves the authenticated user's review for a specific product
      tags:
        - Review
      security:
        - bearerAuth: []  # Requires JWT authentication
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")   
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: The ID of the product to get review for
      responses:
        '200':
          description: Review retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    userId:
                      type: string
                    productId:
                      type: object
                      properties:
                        _id:
                          type: string
                        # Include other product fields that get populated
                    rating:
                      type: number
                    comment:
                      type: string
                    createdAt:
                      type: string
                      format: date-time
                    updatedAt:
                      type: string
                      format: date-time
        '400':
          description: No reviews found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "no reviews found!"
        '401':
          description: Unauthorized (invalid token)
        '500':
          description: Internal server error 
          
  /api/review/myReviews:
    get:
      summary: Get all reviews by the authenticated user
      description: Retrieves all reviews submitted by the currently logged-in user
      tags:
        - Review
      security:
        - bearerAuth: []  # Requires JWT authentication
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")        
      responses:
        '200':
          description: User's reviews retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "507f1f77bcf86cd799439011"
                    userId:
                      type: string
                      example: "507f191e810c19729de860ea"
                    productId:
                      type: object
                      properties:
                        _id:
                          type: string
                        # Other product fields that get populated
                    rating:
                      type: number
                      example: 5
                    comment:
                      type: string
                      example: "Excellent product!"
                    createdAt:
                      type: string
                      format: date-time
                    updatedAt:
                      type: string
                      format: date-time
        '400':
          description: No reviews found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "no reviews found!!"
        '401':
          description: Unauthorized (invalid token)
        '500':
          description: Internal server error                                  
  
  /api/review/deleteSeperateReview/{productId}:
    delete:
      summary: Delete a specific review
      description: Deletes the authenticated user's review for a specific product
      tags:
        - Review
      security:
        - bearerAuth: []  # Requires JWT authentication
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")   
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: The ID of the product whose review should be deleted
      responses:
        '200':
          description: Review deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "review deleted successfully!!"
        '401':
          description: Unauthorized (invalid token)
        '500':
          description: Internal server error

  /api/cart/addToCart/{productId}:
    post:
      summary: Add product to cart
      description: |
        Adds a product to the user's cart with default quantity of 1.
        Creates new cart if none exists, or appends to existing cart.
      tags:
        - Cart
      security:
        - bearerAuth: []  # Requires JWT authentication
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: ID of the product to add to cart
      responses:
        '201':
          description: Product added to cart successfully
          content:
            application/json:
              schema:
                type: string
                example: "added to cart"
        '401':
          description: Unauthorized (invalid token)
        '500':
          description: Internal server error

  /api/cart/viewCart:
    get:
      summary: View user's cart
      description: Retrieves the authenticated user's cart with product details
      tags:
        - Cart
      security:
        - bearerAuth: []  # Requires JWT authentication
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")        
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    productId:
                      type: string
                      example: "60d21b4667d0d8992e610c85"
                    title:
                      type: string
                      example: "Premium Headphones"
                    image:
                      type: string
                      example: "https://example.com/images/headphones.jpg"
                    price:
                      type: number
                      example: 199.99
                    quantity:
                      type: number
                      example: 2
                    totalPrice:
                      type: number
                      example: 399.98
        '404':
          description: Cart is empty
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No product added in the cart"
        '401':
          description: Unauthorized (invalid token)
        '500':
          description: Internal server error

  /api/cart/updateCartQuantity:
    patch:
      summary: Update product quantities in cart
      description: Updates quantities for multiple products in the user's cart
      tags:
        - Cart
      security:
        - bearerAuth: []  # Requires JWT authentication
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "Bearer <token>")
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - products
              properties:
                products:
                  type: array
                  items:
                    type: object
                    required:
                      - productId
                      - quantity
                    properties:
                      productId:
                        type: string
                        description: ID of the product to update
                        example: "60d21b4667d0d8992e610c85"
                      quantity:
                        type: number
                        description: New quantity for the product
                        example: 3
                  description: Array of products with their updated quantities
      responses:
        '200':
          description: Quantities updated successfully
          content:
            application/json:
              schema:
                type: string
                example: "product quantity updated successfully!!!"
        '401':
          description: Unauthorized (invalid token)
        '500':
          description: Internal server error       

  /api/cart/deleteOneCart/{productId}:
    delete:
      summary: Remove product from cart
      description: |
        Removes a specific product from the user's cart.
        Deletes the entire cart if it becomes empty.
      tags:
        - Cart
      security:
        - bearerAuth: []  # Requires JWT authentication
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")   
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: ID of the product to remove from cart
      responses:
        '200':
          description: Product removed successfully
          content:
            application/json:
              schema:
                type: string
                example: "product is removed from the cart"
        '401':
          description: Unauthorized (invalid token)
        '500':
          description: Internal server error  

  /api/cart/deleteFullCart:
    delete:
      summary: Delete entire cart
      description: Completely removes the authenticated user's shopping cart
      tags:
        - Cart
      security:
        - bearerAuth: []  # Requires JWT authentication
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")        
      responses:
        '200':
          description: Cart deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "Cart deleted succesfully!!!"
        '401':
          description: Unauthorized (invalid token)
        '500':
          description: Internal server error

  /api/wishlist/addToWishlist/{productId}:
    post:
      summary: Add product to wishlist
      description: |
        Adds a product to the user's wishlist
        Creates new wishlist if none exists, or appends to existing wishlist.
      tags:
        - Wishlist
      security:
        - bearerAuth: []  # Requires JWT authentication
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")    
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: ID of the product to add to wishlist
      responses:
        '201':
          description: Product added to wishlist successfully
          content:
            application/json:
              schema:
                type: string
                example: "added to wishlist"
        '401':
          description: Unauthorized (invalid token)
        '500':
          description: Internal server error 

  /api/wishlist/viewWishlist:
    get:
      summary: View user's wishlist
      description: Retrieves the authenticated user's wishlist with product details
      tags:
        - Wishlist
      security:
        - bearerAuth: []  # Requires JWT authentication
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")        
      responses:
        '200':
          description: Wishlist retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    userId:
                      type: string
                    products:
                      type: array
                      items:
                        type: object
                        properties:
                          productId:
                            type: object
                            properties:
                              _id:
                                type: string
                    createdAt:
                      type: string
                      format: date-time
                    updatedAt:
                      type: string
                      format: date-time
        '404':
          description: Wishlist is empty
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No product added in the Wishlist"
        '401':
          description: Unauthorized (invalid token)
        '500':
          description: Internal server error  

  /api/wishlist/deleteOneWishlist/{productId}:
    delete:
      summary: Remove product from Wishlist
      description: |
        Removes a specific product from the user's Wishlist.
        Deletes the entire wishlist if it becomes empty.
      tags:
        - Wishlist
      security:
        - bearerAuth: []  # Requires JWT authentication
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")  
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: ID of the product to remove from wishlist
      responses:
        '200':
          description: Product removed successfully
          content:
            application/json:
              schema:
                type: string
                example: "product is removed from the wishlist"
        '401':
          description: Unauthorized (invalid token)
        '500':
          description: Internal server error  

  /api/wishlist/deleteFullWishlist:
    delete:
      summary: Delete entire wishlist
      description: Completely removes the authenticated user's wishlist
      tags:
        - Wishlist
      security:
        - bearerAuth: []  # Requires JWT authentication
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")        
      responses:
        '200':
          description: Wishlist deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: "Wishlist deleted succesfully!!!"
        '401':
          description: Unauthorized (invalid token)
        '500':
          description: Internal server error     

  /api/common/getAllProduct:
    get:
      summary: Get all products
      description: Retrieves a list of all products
      tags:
        - Common
      responses:
        '200':
          description: List of products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "507f1f77bcf86cd799439011"
                    productName:
                      type: string
                      example: "Premium Smartphone"
                    productImage:
                      type: string
                      example: "https://example.com/image.jpg"
                    productPrice:
                      type: number
                      example: 599.99
                    discountPercentage:
                      type: number
                      nullable: true
                      example: 15
                    seller:
                      type: string
                      example: "507f191e810c19729de860ea"
                    createdAt:
                      type: string
                      format: date-time
                    updatedAt:
                      type: string
                      format: date-time
        '500':
          description: Internal server error       

  /api/common/getSpecificProduct/{productId}:
    get:
      summary: Get a specific product
      description: Retrieves details of a single product by its ID
      tags:
        - Common
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: ID of the product to retrieve
      responses:
        '200':
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "507f1f77bcf86cd799439011"
                  productName:
                    type: string
                    example: "Premium Smartphone"
                  productImage:
                    type: string
                    example: "https://example.com/image.jpg"
                  productPrice:
                    type: number
                    example: 599.99
                  discountPercentage:
                    type: number
                    nullable: true
                    example: 15
                  seller:
                    type: string
                    example: "507f191e810c19729de860ea"
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        '500':
          description: Internal server error      

  /api/common/getProductByCategory/{category}:
    get:
      summary: Get products by category
      description: Retrieves all products belonging to a specific category
      tags:
        - Common
      parameters:
        - in: path
          name: category
          required: true
          schema:
            type: string
          description: Category name to filter products
      responses:
        '200':
          description: List of products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "507f1f77bcf86cd799439011"
                    productName:
                      type: string
                      example: "Premium Smartphone"
                    productImage:
                      type: string
                      example: "https://example.com/image.jpg"
                    productPrice:
                      type: number
                      example: 599.99
                    discountPercentage:
                      type: number
                      nullable: true
                      example: 15
                    category:
                      type: string
                      example: "electronics"
                    subCategory:
                      type: string
                      example: "Phones"  
                    seller:
                      type: string
                      example: "507f191e810c19729de860ea"
                    createdAt:
                      type: string
                      format: date-time
                    updatedAt:
                      type: string
                      format: date-time
        '500':
          description: Internal server error 

  /api/common/getProductBySubCategory/{SubCategory}:
    get:
      summary: Get products by sub category
      description: Retrieves all products belonging to a specific sub category
      tags:
        - Common
      parameters:
        - in: path
          name: subCategory
          required: true
          schema:
            type: string
          description: SubCategory name to filter products
      responses:
        '200':
          description: List of products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "507f1f77bcf86cd799439011"
                    productName:
                      type: string
                      example: "Premium Smartphone"
                    productImage:
                      type: string
                      example: "https://example.com/image.jpg"
                    productPrice:
                      type: number
                      example: 599.99
                    discountPercentage:
                      type: number
                      nullable: true
                      example: 15
                    category:
                      type: string
                      example: "electronics"
                    subCategory:
                      type: string
                      example: "Phones"  
                    seller:
                      type: string
                      example: "507f191e810c19729de860ea"
                    createdAt:
                      type: string
                      format: date-time
                    updatedAt:
                      type: string
                      format: date-time
        '500':
          description: Internal server error   

  /api/common/getNewArrival:
    get:
      summary: Get new arrival products
      description: |
        Retrieves the 5 most recently added products, sorted by creation date in descending order.
      tags:
        - Common
      responses:
        '200':
          description: Successfully retrieved new arrival products
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "507f1f77bcf86cd799439011"
                    name:
                      type: string
                      example: "Premium Headphones"
                    category:
                      type: string
                      example: "Electronics"
                    price:
                      type: number
                      example: 199.99
                    createdAt:
                      type: string
                      format: date-time
                      example: "2023-05-15T10:00:00Z"
                    # Add other product properties as needed
        '500':
          description: Internal server error

  /api/common/sale:
    post:
      summary: Create or update sale
      description: |
        Creates a new sale or updates existing sale configuration.
        Only one active sale can exist at a time.
      tags:
        - Common
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - startTime
                - endTime
                - discount
              properties:
                startTime:
                  type: string
                  format: date-time
                  example: "2024-03-01T00:00:00Z"
                  description: Sale start time in ISO format
                endTime:
                  type: string
                  format: date-time
                  example: "2024-03-31T23:59:59Z"
                  description: Sale end time in ISO format
                discount:
                  type: number
                  example: 20
                  description: Discount percentage (e.g., 20 for 20%)
      responses:
        '200':
          description: Sale configuration saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: "507f1f77bcf86cd799439011"
                  startTime:
                    type: string
                    format: date-time
                  endTime:
                    type: string
                    format: date-time
                  discount:
                    type: number
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        '500':
          description: Internal server error  

  /api/common/getSaleProduct:
    get:
      tags:
        - Common
      summary: Get sale products
      description: |
        Retrieves all products currently on sale.
        Checks if sale period has ended and updates product status.
        Returns array of active sale products.
      responses:
        '200':
          description: Successfully retrieved sale products
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    productName:
                      type: string
                    productImage:
                      type: string
                    productPrice:
                      type: number
                    sale:
                      type: boolean
                    discountPercentage:
                      type: number
                    seller:
                      type: string
                    createdAt:
                      type: string
                      format: date-time
                    updatedAt:
                      type: string
                      format: date-time
        '404':
          description: |
            Not found - Possible reasons:
            - No products currently on sale ("no products are there in sale")
            - Sale period has ended ("sale is no longer exist!!!")
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Internal server error  

  /api/common/getLimitedSaleProduct:
    get:
      tags:
        - Common
      summary: Get limited sale products
      description: |
        Retrieves up to 6 products currently on sale.
        Checks if sale period has ended and updates product status.
        Returns array of active sale products (max 6 items).
      responses:
        '200':
          description: Successfully retrieved sale products
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "507f1f77bcf86cd799439011"
                    productName:
                      type: string
                      example: "Premium Smartphone"
                    productImage:
                      type: string
                      example: "https://example.com/image.jpg"
                    productPrice:
                      type: number
                      example: 599.99
                    sale:
                      type: boolean
                      example: true
                    discountPercentage:
                      type: number
                      example: 15
                    seller:
                      type: string
                      example: "507f191e810c19729de860ea"
                    createdAt:
                      type: string
                      format: date-time
                    updatedAt:
                      type: string
                      format: date-time
        '404':
          description: |
            Not found - Possible reasons:
            - No products currently on sale ("no products are there in sale")
            - Sale period has ended ("sale is no longer exist!!!")
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Internal server error             
 
  /api/order/placeOrder:
    post:
      summary: Place a new order
      description: Creates a new order with products from cart
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - products
                - payment
                - address
              properties:
                products:
                  type: array
                  items:
                    type: object
                    required:
                      - productId
                      - quantity
                    properties:
                      productId:
                        type: string
                        description: ID of the product to order
                      size:
                        type: string
                        enum: ["XS", "S", "M", "L", "XL"]
                      color:
                        type: string
                        enum: ["Red", "Blue", "Green", "Yellow", "Orange", "Purple", "Pink", "Black", "White", "Gray", "Brown", "Gold", "Silver"]
                      quantity:
                        type: integer
                        minimum: 1
                payment:
                  type: string
                  enum: ["COD", "Bank"]
                address:
                  type: object
                  required:
                    - firstName
                    - street
                    - city
                    - phone
                    - email
                  properties:
                    firstName:
                      type: string
                    lastName:
                      type: string
                    company:
                      type: string
                    street:
                      type: string
                    apartment:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
                    pinCode:
                      type: string
                    phone:
                      type: string
                    country:
                      type: string
                    email:
                      type: string
                      format: email
      responses:
        '200':
          description: Order placed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  userId:
                    type: string
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        productId:
                          type: string
                        title:
                          type: string
                        image:
                          type: string
                        price:
                          type: string
                        variant:
                          type: object
                          properties:
                            size:
                              type: string
                            color:
                              type: string
                        quantity:
                          type: integer
                  payment:
                    type: string
                  address:
                    type: object
                    properties:
                      firstName:
                        type: string
                      lastName:
                        type: string
                      company:
                        type: string
                      street:
                        type: string
                      apartment:
                        type: string
                      city:
                        type: string
                      phone:
                        type: string
                      email:
                        type: string
                      state:
                        type: string
                      pinCode:
                        type: string
                      country:
                        type: string
                  createdAt:
                    type: string
                    format: date-time
        '400':
          description: Bad request (invalid data or missing required fields)
        '401':
          description: Unauthorized (invalid token)
        '404':
          description: Product not found
        '500':
          description: Internal server error     

  /api/order/myOrder:
    get:
      summary: Get user's orders
      description: Retrieves all orders for the authenticated user
      tags:
        - Order
      security:
        - bearerAuth: []  # JWT authentication required
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "507f1f77bcf86cd799439011"
                    userId:
                      type: string
                      example: "507f191e810c19729de860ea"
                    products:
                      type: array
                      items:
                        type: object
                        properties:
                          productId:
                            type: string
                          name:
                            type: string
                          image:
                            type: string
                          price:
                            type: string
                          variant:
                            type: object
                            properties:
                              size:
                                type: string
                              color:
                                type: string
                          quantity:
                            type: number
                    payment:
                      type: string
                      example: "COD"
                    address:
                      type: object
                      properties:
                        firstName:
                          type: string
                        lastName:
                          type: string  
                        company:
                          type: string
                        street:
                          type: string
                        apartment:
                          type: string
                        city:
                          type: string
                        phone:
                          type: string
                        email:
                          type: string
                        country:
                          type: string
                        state:
                          type: string
                        pinCode:
                          type: string
                    createdAt:
                      type: string
                      format: date-time
        '401':
          description: Unauthorized (invalid token)
        '404':
          description: No orders found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "nothing in cart"
        '500':
          description: Internal server error    

  /api/coupon/createCoupon:
    post:
      tags:
        - Coupon
      summary: Create a new coupon
      description: Creates a new discount coupon with the provided details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - coupon
                - discountType
                - discountValue
                - expiresAt
              properties:
                coupon:
                  type: string
                  description: The coupon code
                discountType:
                  type: string
                  enum: ["Percentage", "Fixed"]
                  description: Type of discount (Percentage or Fixed amount)
                discountValue:
                  type: number
                  description: Value of the discount (percentage or fixed amount)
                expiresAt:
                  type: string
                  format: date-time
                  description: Expiration date of the coupon (will be converted to IST)
                isForNewUser:
                  type: boolean
                  description: Whether coupon is exclusively for new users
                validProducts:
                  type: array
                  items:
                    type: string
                  description: Array of product IDs this coupon applies to
                validCategories:
                  type: array
                  items:
                    type: string
                  description: Array of category IDs this coupon applies to
      responses:
        '200':
          description: Coupon created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "coupon created successfully!!!"
                  coupon:
                    type: object
                    properties:
                      coupon:
                        type: string
                      discountType:
                        type: string
                      discountValue:
                        type: number
                      expiresAt:
                        type: string
                        format: date-time
                      isForNewUser:
                        type: boolean
                      validProducts:
                        type: array
                        items:
                          type: string
                      validCategories:
                        type: array
                        items:
                          type: string
        '400':
          description: Bad request - Coupon already exists
        '500':
          description: Internal server error

  /api/coupon/applyCoupon:
    post:
      tags:
        - Coupon
      summary: Apply a coupon to get discount
      description: |
        Applies a coupon code to calculate discounted price and marks it as used by the current user.
        Validates coupon restrictions including:
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Bearer token for authentication (e.g., "{headers : {Authorization : `Bearer ${token}`}")        
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - coupon
                - totalPrice
                - cartItems
              properties:
                coupon:
                  type: string
                  description: The coupon code to apply
                totalPrice:
                  type: number
                  description: Original total price before discount
                cartItems:
                  type: array
                  items:
                    type: object
                    required:
                      - productId
                      - price
                      - category
                    properties:
                      productId:
                        type: string
                        description: ID of the product in cart
                      price:
                        type: number
                        description: Price of the product
                      category:
                        type: string
                        description: Category of the product (required for category-specific coupons)
      responses:
        '200':
          description: Successfully applied coupon
          content:
            application/json:
              schema:
                type: number
                description: The discounted price after applying coupon
        '400':
          description: |
            Bad request - Possible reasons:
            - Coupon expired
            - Already used by this user
            - Not eligible for existing customers (new-user only coupon)
            - Not valid for cart items (product/category restriction)
        '404':
          description: Coupon not found
        '500':
          description: Internal server error